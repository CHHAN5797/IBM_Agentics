{
  "captured_at_utc": "2025-10-07T07:04:23.757826+00:00",
  "snapshot_url": "https://snapshot.org/#/arbitrumfoundation.eth/proposal/0x7cc26491a070c74c1a4ec5a9892571d31eb690015936a35b52c0d3a97bd5497f",
  "focus": null,
  "votes_count": 3328,
  "timeline_metrics_current": {
    "unique_voters": 3328,
    "total_votes": 3328,
    "first_vote_at": "2025-02-20T23:11:25Z",
    "last_vote_at": "2025-02-27T22:59:14Z",
    "series_step_hours": 6.0,
    "summary": "timeline-only analysis (no final tally)",
    "recommended_index": 0,
    "lead_ratio_by_quartile": [
      [
        1.0,
        0.0,
        0.0
      ],
      [
        1.0,
        0.0,
        0.0
      ],
      [
        1.0,
        0.0,
        0.0
      ],
      [
        1.0,
        0.0,
        0.0
      ]
    ],
    "lead_ratio_total": [
      1.0,
      0.0,
      0.0
    ],
    "stability": [
      1.0,
      0.0,
      0.0
    ],
    "early_ratio": [
      1.0,
      0.0,
      0.0
    ],
    "vp_by_quartile": [
      [
        22645599.006057136,
        4441.161014865948,
        5118.151580150417
      ],
      [
        697907.2049019311,
        326.9041505596037,
        9128.271560915973
      ],
      [
        23120750.829486843,
        2937.27898785223,
        2724.518853975323
      ],
      [
        77494986.1930486,
        126.51077069769033,
        20013206.217085525
      ]
    ],
    "spike_index": 0.146145,
    "spike_follow_support_ratio": 0.999988,
    "stairwise_ratio": 0.000766,
    "half_slope_diff": -335.73353
  },
  "adjacent_analytics": [
    {
      "id": "0x45513bb63946582432afa7213bcb2677e877dabbd5722210efd5eaf45797031c",
      "title": "Request to Increase the Stylus Sprint Committee's Budget",
      "author": "0xb4c064f466931B8d0F637654c916E3F203c46f13",
      "end_utc": "2025-02-13T18:55:46Z",
      "timeline_metrics": {
        "unique_voters": 4120,
        "total_votes": 4120,
        "first_vote_at": "2025-02-06T19:01:32Z",
        "last_vote_at": "2025-02-13T18:48:20Z",
        "series_step_hours": 6.0,
        "summary": "timeline-only analysis (no final tally)",
        "recommended_index": 0,
        "lead_ratio_by_quartile": [
          [
            1.0,
            0.0,
            0.0
          ],
          [
            1.0,
            0.0,
            0.0
          ],
          [
            1.0,
            0.0,
            0.0
          ],
          [
            1.0,
            0.0,
            0.0
          ]
        ],
        "lead_ratio_total": [
          1.0,
          0.0,
          0.0
        ],
        "stability": [
          1.0,
          0.0,
          0.0
        ],
        "early_ratio": [
          1.0,
          0.0,
          0.0
        ],
        "vp_by_quartile": [
          [
            25052107.555099204,
            54848.376054728375,
            89438.40349193676
          ],
          [
            11376521.489334602,
            54367.44512955545,
            1847.6980118317313
          ],
          [
            31201094.377331644,
            2841663.2000569925,
            128213.72762826136
          ],
          [
            88983537.81877631,
            3209879.067419079,
            133516.0758303734
          ]
        ],
        "spike_index": 0.13225,
        "spike_follow_support_ratio": 1.0,
        "stairwise_ratio": 0.00057,
        "half_slope_diff": 75.589071
      },
      "price_impact_pct": 1.6913,
      "tvl_impact_pct": 1.5147,
      "similarity": 0.1135,
      "actual_vote_result": {
        "winner_index": 0,
        "winner_label": "For",
        "margin_abs": 150452503.15188113,
        "scores_total": 163127035.23416412,
        "margin_pct": 0.9223026884287508
      }
    },
    {
      "id": "0xbd77b4faf99e06c7b4117e5dafaf5bb8f873bcffbb5c9d414a7ff745b6849f3a",
      "title": "Approve the Nova Fee Sweep Action",
      "author": "0xb4c064f466931B8d0F637654c916E3F203c46f13",
      "end_utc": "2025-02-07T04:30:00Z",
      "timeline_metrics": {
        "unique_voters": 3550,
        "total_votes": 3550,
        "first_vote_at": "2025-01-31T04:36:44Z",
        "last_vote_at": "2025-02-07T04:12:54Z",
        "series_step_hours": 6.0,
        "summary": "timeline-only analysis (no final tally)",
        "recommended_index": 0,
        "lead_ratio_by_quartile": [
          [
            1.0,
            0.0,
            0.0
          ],
          [
            1.0,
            0.0,
            0.0
          ],
          [
            1.0,
            0.0,
            0.0
          ],
          [
            1.0,
            0.0,
            0.0
          ]
        ],
        "lead_ratio_total": [
          1.0,
          0.0,
          0.0
        ],
        "stability": [
          1.0,
          0.0,
          0.0
        ],
        "early_ratio": [
          1.0,
          0.0,
          0.0
        ],
        "vp_by_quartile": [
          [
            1684806.8024027837,
            4508.551986962056,
            3687.6068257511083
          ],
          [
            25910897.70501875,
            793.9038120280396,
            1656.2086957664915
          ],
          [
            29915373.052165337,
            2100.751755769868,
            2525.0481195176726
          ],
          [
            111076391.4105782,
            22.431966117311536,
            628.791050773886
          ]
        ],
        "spike_index": 0.122838,
        "spike_follow_support_ratio": 0.727586,
        "stairwise_ratio": 0.000564,
        "half_slope_diff": 580.264165
      },
      "price_impact_pct": -2.9572,
      "tvl_impact_pct": 0.947,
      "similarity": 0.1375,
      "actual_vote_result": {
        "winner_index": 0,
        "winner_label": "For",
        "margin_abs": 168578971.31547305,
        "scores_total": 168603392.26437742,
        "margin_pct": 0.9998551574284693
      }
    },
    {
      "id": "0x6baef084d47cb0e0f5788449e0d6fafd6312a69f65b550d62d5b6772297b8695",
      "title": "Arbitrum Strategic Objective Setting (SOS) – Defining the DAO’s Interim Goals",
      "author": "0xb4c064f466931B8d0F637654c916E3F203c46f13",
      "end_utc": "2025-01-31T00:06:29Z",
      "timeline_metrics": {
        "unique_voters": 3559,
        "total_votes": 3559,
        "first_vote_at": "2025-01-24T00:13:39Z",
        "last_vote_at": "2025-01-30T23:43:37Z",
        "series_step_hours": 6.0,
        "summary": "timeline-only analysis (no final tally)",
        "recommended_index": 0,
        "lead_ratio_by_quartile": [
          [
            1.0,
            0.0,
            0.0
          ],
          [
            1.0,
            0.0,
            0.0
          ],
          [
            1.0,
            0.0,
            0.0
          ],
          [
            1.0,
            0.0,
            0.0
          ]
        ],
        "lead_ratio_total": [
          1.0,
          0.0,
          0.0
        ],
        "stability": [
          1.0,
          0.0,
          0.0
        ],
        "early_ratio": [
          1.0,
          0.0,
          0.0
        ],
        "vp_by_quartile": [
          [
            14120727.032803947,
            2561.476849309629,
            880.4386622170273
          ],
          [
            547281.8620074113,
            22378.89819952993,
            467.92553529118965
          ],
          [
            22159956.035675578,
            25238.020803876934,
            2471.534191588028
          ],
          [
            100965927.5276739,
            216.32704641860198,
            76.45804397815455
          ]
        ],
        "spike_index": 0.13187,
        "spike_follow_support_ratio": 1.0,
        "stairwise_ratio": 0.000717,
        "half_slope_diff": 837.630745
      },
      "price_impact_pct": -8.8117,
      "tvl_impact_pct": -3.5979,
      "similarity": 0.1229,
      "actual_vote_result": {
        "winner_index": 0,
        "winner_label": "For",
        "margin_abs": 137743497.73526165,
        "scores_total": 137848183.53749302,
        "margin_pct": 0.999240571768558
      }
    }
  ],
  "similar_proposals_data": [
    {
      "proposal_id": "0xa635e39a2c527f7a1eabf5ea22bdec6f4a265d6c69a06076e65fde0ae0a5941b",
      "cleaned": {
        "proposal_id": "0xa635e39a2c527f7a1eabf5ea22bdec6f4a265d6c69a06076e65fde0ae0a5941b",
        "title": "AIP: ArbOS Version 11",
        "author": "0xb5B069370Ef24BC67F114e185D185063CE3479f8",
        "end_utc": "2023-12-04T22:11:25Z",
        "similarity_score": 0.1763,
        "winning_option": "For",
        "winning_option_index": 0,
        "margin_abs": 168104137.46013948,
        "margin_pct": 0.9976092691956788,
        "scores_total": 168506992.31741625,
        "change_stance": "To change"
      },
      "timeline_metrics": {
        "unique_voters": 5500,
        "total_votes": 5500,
        "first_vote_at": "2023-11-27T22:11:54Z",
        "last_vote_at": "2023-11-28T08:04:09Z",
        "series_step_hours": 6.0,
        "summary": "timeline-only analysis (no final tally)",
        "recommended_index": 0,
        "lead_ratio_by_quartile": [
          [
            1.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0
          ]
        ],
        "lead_ratio_total": [
          1.0,
          0.0,
          0.0
        ],
        "stability": [
          1.0,
          0.0,
          0.0
        ],
        "early_ratio": [
          1.0,
          0.0,
          0.0
        ],
        "vp_by_quartile": [
          [
            10415056.106401827,
            14648.050600593342,
            7295.064165670068
          ],
          [
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0
          ]
        ],
        "spike_index": 0.628899,
        "spike_follow_support_ratio": 1.0,
        "stairwise_ratio": 0.003832,
        "half_slope_diff": 79.726091
      },
      "raw": {
        "id": "0xa635e39a2c527f7a1eabf5ea22bdec6f4a265d6c69a06076e65fde0ae0a5941b",
        "title": "AIP: ArbOS Version 11",
        "author": "0xb5B069370Ef24BC67F114e185D185063CE3479f8",
        "body": "# AIP: ArbOS Version 11\n\n# Constitutional\n\n## Abstract\n\nThis AIP introduces a number of improvements to Arbitrum chains, including support for the EVM Shanghai upgrade and the PUSH0 opcode, along with miscellaneous bug fixes. These improvements are now audited and ready for adoption, including by Arbitrum Orbit chains, Arbitrum One, and Arbitrum Nova. This proposal concerns the latter two, as they are governed by the Arbitrum DAO. On a high level an ArbOS upgrade can be seen as Arbitrum's equivalent of a hardfork - more can be read about the subject over in https://forum.arbitrum.foundation/t/arbitrum-arbos-upgrades/19695\n\n## Changes Included\n\n### 1. EVM Shanghai support (including the PUSH0 opcode)\n\nRecent versions of go-ethereum already includes support for the changes to the EVM made in the Shanghai L1 upgrade, but we need to enable them for Arbitrum chains. Instead of using a time based activation, it’s better to activate support based on the ArbOS version, which makes sure that even if the upgrade is delayed, Shanghai support will take effect uniformly and without causing divergences with out of date node software.\n\nPRs: \nhttps://github.com/OffchainLabs/nitro/pull/1583 \nhttps://github.com/OffchainLabs/nitro/pull/1664  \nhttps://github.com/OffchainLabs/nitro/pull/1712\n\n### 2. Retryable fixes\n\nRetryable fees previously always used the network fee account, instead of also using the infrastructure fee account. The infrastructure fee account should be paid fees from the basefee, and the network fee account should be paid any surplus fees when the gas price is elevated. That was correctly implemented for normal transactions, but retryables only dealt with the network fee account. Retryable redemption also reported an incorrect gas usage in the block header. This matters to Arbitrum Nova, where the infrastructure fee account pays out some fees to the Data Availability Committee members, but the network fee account does not.\n\nPRs: \nhttps://github.com/OffchainLabs/nitro/pull/1789\nhttps://github.com/OffchainLabs/nitro/pull/1980\n\n### 3. Fix the chain owner list returned by precompile\n\nThis change doesn’t affect the actual chain owner set, but the list being returned by the ArbOwnerPublic precompile was incorrect for Arbitrum Nova due to an internal ArbOS issue. To be clear, this does not affect who was able to make chain owner actions. As intended, only the DAO is able to make chain owner actions on Arbitrum One and Arbitrum Nova. This change only affects the list of chain owners presented by the ArbOwnerPublic precompile.\n\nPRs: \nhttps://github.com/OffchainLabs/nitro/pull/1525\nhttps://github.com/OffchainLabs/nitro/pull/1768\n\n### 4. Fix some precompile methods taking up all gas when reverting\n\nSome precompile methods such as ArbSys’s arbBlockHash method took up all gas when reverting. That meant that if a transaction called arbBlockHash with an out-of-range block number, it’d use up all the gas when reverting.\n\nPR: \nhttps://github.com/OffchainLabs/nitro/pull/1490\n\n### 5. Create missing precompile methods to view some L1 pricing parameters\n\nThe L1RewardReceipient and L1RewardRate were previously not exposed via precompiles. This change adds methods to get them to ArbGasInfo so that the current chain configuration can be easily checked.\n\nPR: \nhttps://github.com/OffchainLabs/nitro/pull/1775\n\n### 6. Fix the possibility of a staticcall from the owner to ArbOwner emitting a log\n\nThis shouldn’t matter in practice, but it was theoretically for a staticcall from the chain owner to the ArbOwner precompile to emit a log. In the EVM, staticcalls should never be able to emit logs. This PR fixes the Arbitrum precompile logic to disallow emitting logs in staticcall contexts.\n\nPR: \nhttps://github.com/OffchainLabs/nitro/pull/1562\n\n### 7. Fix default L1 pricing params\n\nThis shouldn’t matter for Arbitrum One and Arbitrum Nova, because these parameters were already corrected in [AIP-7](https://forum.arbitrum.foundation/t/aip-7-arbitrum-one-governance-parameter-fixes/15920). However, it’s included in ArbOS version 11 so that any Arbitrum Orbit chains automatically get the correct parameters.\n\nPR: \nhttps://github.com/OffchainLabs/nitro/pull/1549\n\n## Implementation\n\nThe canonical version of ArbOS 11 this proposal aims to adopt is implemented in the Arbitrum Nitro git commit hash  `df93361a1293574903f28fbbbe0469a3ea5c644d`\n\nThat commit builds a WASM module root of `0xf4389b835497a910d7ba3ebfb77aa93da985634f3c052de1290360635be40c4a`, which is a hash of the code that’s put on-chain for fraud proofs. You can verify this WASM module root on a x86_64 computer (i.e. not on ARM which builds slightly different symbol names) with Docker setup by checking out the previously mentioned commit of the nitro repository, running `git submodule update --init --recursive`, and then running `docker build . --target module-root-calc --tag wavm-machine && docker run --rm wavm-machine cat /workspace/target/machines/latest/module-root.txt` This uses Docker to perform a reproducible build of the WebAssembly code used in fraud proofs, and outputs its hash.\n\nThe above code has audited by Trail of Bits - the audit report can be viewed in https://drive.google.com/file/d/1uwA1PK3AB9ggHMqaw91mubu5WHcEp398/view?usp=sharing\n\n### Upgrade Action smart contracts\n\nThe Action smart contracts used to execute the on-chain upgrade can be viewed in \n\nhttps://github.com/ArbitrumFoundation/governance/pull/170\n\nAction contract addresses:\n[SetArbOneArbOS11ModuleRootAction](https://etherscan.io/address/0xe8e5dc1793d6fe39452ddcb90d12997fa39de1de#code)\n[SetNovaArbOS11ModuleRootAction](https://etherscan.io/address/0x6B125347f3B0790197d5247f32f91fd3e7140eD7#code)\n[SetArbOS11VersionAction](https://arbiscan.io/address/0xF6c7Dc6eaE78aBF2f32df899654ca425Dfa99481#code)\n[SetArbOS11VersionAction](https://nova.arbiscan.io/address/0x5357f4d3e8f8250a77bcddd5e58886ad1358220c#code)\n\n\nThe above code has audited by Trail of Bits - the audit report can be viewed in https://drive.google.com/file/d/1N3197Z7DuqBpu9qdt-GWPewe8HQakfLY/view?usp=sharing\n\n\n\n### Verifying the ArbOS Code Difference\n\nThe current ArbOS version used on Arbitrum One and Arbitrum Nova is ArbOS 10, corresponding to the Arbitrum Nitro `consensus-v10` git tag. You can verify this by running the previously mentioned steps to build the WASM module root on that git tag, which produces the WASM module root `0x6b94a7fc388fd8ef3def759297828dc311761e88d8179c7ee8d3887dc554f3c3`, which is what the rollup contract’s `wasmModuleRoot()` method returns for both Arbitrum One and Arbitrum Nova.\n\nTo audit the code difference from ArbOS 10 to ArbOS 11, you could simple generate a full nitro diff with `git diff consensus-v10 df93361a1293574903f28fbbbe0469a3ea5c644d` (and also generate a diff of the go-ethereum submodule mentioned in that nitro diff). However, that includes a lot of code that isn’t part of the WASM module root. To filter down to just the replay binary which defines the state transition function, you can start by generating a list of files in the nitro and go-ethereum repositories included by the replay binary in either ArbOS 10 or ArbOS 11 with bash:\n\n```\n#!/usr/bin/env bash\nset -e\nmkdir -p ~/tmp # this script uses ~/tmp as scratch space and output\n# this script should be run in the nitro repository\ngit checkout df93361a1293574903f28fbbbe0469a3ea5c644d\ngit submodule update --init --recursive\nmake solgen\ngo list -f \"{{.Deps}}\" ./cmd/replay | tr -d '[]' | sed 's/ /\\\\n/g' | grep 'github.com/offchainlabs/nitro/' | sed 's@github.com/offchainlabs/nitro/@@' | while read dir; do find \"$dir\" -type f -name '*.go' -maxdepth 1; done | grep -v '_test\\\\.go\n```\n\nNow, `~/tmp/replay-binary-dependencies.txt` contains a list of dependencies of the replay binary that were present in ArbOS 10 or 11. To use that to generate a smaller diff of the nitro repository, you can run:\n\n```\ngit diff consensus-v10 df93361a1293574903f28fbbbe0469a3ea5c644d -- cmd/replay $(cat ~/tmp/replay-binary-nitro-dependencies.txt)\n```\n\nFor the go-ethereum submodule, you can first find out what go-ethereum commit ArbOS 10 and 11 used:\n\n```\n$ git ls-tree consensus-v10 go-ethereum                                                                                                                                                                                           128 ↵\n160000 commit 941aa323e5cbbde1d5806eb4e3dd70553c5a1298  go-ethereum\n$ git ls-tree df93361a1293574903f28fbbbe0469a3ea5c644d go-ethereum\n160000 commit abe584818e104dd5b4fdb8f60381a14eede896de  go-ethereum\n```\n\nThose commit hashes are the go-ethereum commit hashes pinned by each nitro commit. Then, you can again use `git diff` and the files generated by the earlier script to generate a diff limited to code used by the replay binary:\n\n```\ngit diff 941aa323e5cbbde1d5806eb4e3dd70553c5a1298 abe584818e104dd5b4fdb8f60381a14eede896de -- $(cat ~/tmp/replay-binary-geth-dependencies.txt)\n```\n\nThis diff also includes the diff between upstream go-ethereum versions v1.10.25 and v1.11.6, as ArbOS 10 used the former and ArbOS 11 uses the latter. To filter out that difference, you can use this tool to find the intersection of two git diffs: https://gist.github.com/PlasmaPower/795af590f88cfb5e21c5ad9b8a32afdf\n\nWe can use that to find the intersection of the diff of ArbOS 11’s go-ethereum against ArbOS 10’s go-ethereum and the diff of ArbOS 11’s go-etheruem against upstream go-ethereum v1.11.6:\n\n```\ngit diff 941aa323e5cbbde1d5806eb4e3dd70553c5a1298 abe584818e104dd5b4fdb8f60381a14eede896de -- $(cat ~/tmp/replay-binary-geth-dependencies.txt) > ~/tmp/arbos-10-vs-11-geth.diff\ngit diff v1.11.6 abe584818e104dd5b4fdb8f60381a14eede896de -- $(cat ~/tmp/replay-binary-geth-dependencies.txt) > ~/tmp/arbos-11-vs-upstream-geth.diff\ndiff-intersection.py ~/tmp/arbos-10-vs-11-geth.diff ~/tmp/arbos-11-vs-upstream-geth.diff\n```\nIn addition, you can pass the following arguments to `diff-intersection.py` to ignore files that are included by the replay binary but whose components are not used: `--ignore-files 'core/blockchain*.go' arbitrum_types/txoptions.go 'rawdb/**' 'rpc/**'`\n\nNote that by default, `diff-intersection.py` does a line based intersection. To instead do an intersection based on chunks in the diff, known as hunks in git terminology, you can add the `--only-hunks` flag.",
        "end_utc": "2023-12-04T22:11:25Z",
        "similarity_score": 0.1763,
        "vote_result": {
          "choices": [
            "For",
            "Against",
            "Abstain"
          ],
          "scores": [
            168238852.0035423,
            134714.5434028188,
            133425.77047071827
          ],
          "scores_total": 168506992.31741625,
          "state": "closed"
        },
        "tvl_impact": {
          "protocol_slug": "arbitrum",
          "status": "tvl_data_unavailable",
          "error": "Could not fetch TVL data: TVL cache not found for slug='arbitrum'"
        },
        "price_impact": {
          "token_id": "11841",
          "ticker": "ARB",
          "status": "success",
          "event_time_utc": "2023-12-04T22:11:25",
          "pre_price_avg": 1.10536707,
          "post_price_avg": 1.114312305,
          "abnormal_change": 0.8093,
          "pre_days": 3,
          "post_days": 3,
          "abnormal_change_raw": 0.008093,
          "abnormal_change_pct": 0.8093
        }
      }
    },
    {
      "proposal_id": "0x98a2b1eebda641b31d7d22a60708840ec7899157e00a4028f2e9f3030ddaf7a8",
      "cleaned": {
        "proposal_id": "0x98a2b1eebda641b31d7d22a60708840ec7899157e00a4028f2e9f3030ddaf7a8",
        "title": "AIP: BoLD - permissionless validation for Arbitrum",
        "author": "0xb5B069370Ef24BC67F114e185D185063CE3479f8",
        "end_utc": "2024-06-13T18:16:34Z",
        "similarity_score": 0.1623,
        "winning_option": "For",
        "winning_option_index": 0,
        "margin_abs": 166875769.18411812,
        "margin_pct": 0.9985912256325526,
        "scores_total": 167111191.14671922,
        "change_stance": "To change"
      },
      "timeline_metrics": {
        "unique_voters": 5500,
        "total_votes": 5500,
        "first_vote_at": "2024-06-06T18:17:18Z",
        "last_vote_at": "2024-06-10T12:00:24Z",
        "series_step_hours": 6.0,
        "summary": "timeline-only analysis (no final tally)",
        "recommended_index": 0,
        "lead_ratio_by_quartile": [
          [
            1.0,
            0.0,
            0.0
          ],
          [
            1.0,
            0.0,
            0.0
          ],
          [
            1.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0
          ]
        ],
        "lead_ratio_total": [
          1.0,
          0.0,
          0.0
        ],
        "stability": [
          1.0,
          0.0,
          0.0
        ],
        "early_ratio": [
          1.0,
          0.0,
          0.0
        ],
        "vp_by_quartile": [
          [
            1048953.3573839813,
            10170.911692169111,
            19662.901950741212
          ],
          [
            794855.3180078416,
            23856.667370859064,
            20497.554284924514
          ],
          [
            3554193.3960979483,
            1458.729631609627,
            1512.3410699859198
          ],
          [
            0.0,
            0.0,
            0.0
          ]
        ],
        "spike_index": 0.502618,
        "spike_follow_support_ratio": 0.97481,
        "stairwise_ratio": 0.01607,
        "half_slope_diff": 23.699946
      },
      "raw": {
        "id": "0x98a2b1eebda641b31d7d22a60708840ec7899157e00a4028f2e9f3030ddaf7a8",
        "title": "AIP: BoLD - permissionless validation for Arbitrum",
        "author": "0xb5B069370Ef24BC67F114e185D185063CE3479f8",
        "body": "This Snapshot vote aims to solicit a temperature check from the ArbitrumDAO on their stance for bringing the BoLD upgrade to Arbitrum One and Nova. BoLD is a new dispute resolution protocol that unlocks permissionless validation for Arbitrum chains and enhances their security by mitigating the risk of delay attacks.\n\nFor more information, please refer to the original [BoLD AIP Forum Post](https://forum.arbitrum.foundation/t/aip-bold-permissionless-validation-for-arbitrum/23232) where you will find public audit reports, the BoLD whitepaper (that contain the formal specification and safety proofs), as well as further explanations of how BoLD works (including an overview of BoLD’s economics, spam prevention, rewards, reimbursements and penalties) and its proposed design for Arbitrum One and Arbitrum Nova.\n\n## Constitutional Proposal\n\n## Abstract\n\nThis Constitutional AIP proposes upgrading Arbitrum One and Arbitrum Nova’s Rollup Contracts to use Arbitrum BoLD and to support a new challenger manager contract on Ethereum. Arbitrum BoLD is a new dispute resolution protocol that’s designed to replace the existing and currently deployed Arbitrum protocol. If the upgrade is approved, then validators on Arbitrum One and Arbitrum Nova can use the Nitro software to participate in BoLD. BoLD delivers two critical improvements:\n- Unlocks permissionless validation for Arbitrum chains,\n- Enhances the security of Arbitrum chains by mitigating the risk of [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a).\n\nBoLD accomplishes this feat by ensuring that any single honest party can always successfully defend against malicious claims to an Arbitrum chain’s state. BoLD represents the next step on the journey to having the Arbitrum technology stack being recognized as a [Stage 2 Ethereum rollup](https://ethereum-magicians.org/t/proposed-milestones-for-rollups-taking-off-training-wheels/11571). The implementation of BoLD will be thoroughly tested to ensure both its effectiveness and safety. The testing plan includes:\n- A comprehensive [audit by Trail of Bits](https://github.com/trailofbits/publications/blob/master/reviews/2024-04-offchainbold-securityreview.pdf),\n- Deployment of the protocol to public testnets for at least 8 weeks,\n- A public [audit program](https://code4rena.com/audits/2024-05-arbitrum-bold),\n- [Publication of mathematical safety proofs and formal specifications](https://arxiv.org/abs/2404.10491).\n\n## Motivation\n\nThe ArbitrumDAO should consider approving this AIP as BoLD delivers critical security and decentralization improvements for Arbitrum One and Nova that benefit all Arbitrum users, Arbitrum node operators, dApps on Arbitrum, and Arbitrum bridges. These benefits can be extended to any Orbit chain that wishes to adopt BoLD.\n\nMore specifically, this new dispute resolution protocol brings the following benefits to Arbitrum chains:\n- Permissionless validation\n- Fixed delay time for assertion confirmation\n- Security Council Safety-First Approach\n\nMore details on these benefits can be found in the [Motivation section of the original proposal](https://forum.arbitrum.foundation/t/aip-bold-permissionless-validation-for-arbitrum/23232#motivation-2).\n\n## Rationale\n\nEnabling permissionless validation has been a long-term goal of Arbitrum on the [progressive journey towards decentralization](https://docs.arbitrum.foundation/state-of-progressive-decentralization).\n\nBoLD mitigates the risk of delay attacks on Optimistic Rollups by ensuring challenges can be resolved within a fixed time period as long as there is an honest party involved. This particular change unlocks permissionless validation, enabling any well-resourced honest party or parties to defend and protect Arbitrum from malicious actors.\n\nMore details on the community values that this proposal supports, can be found in the [Rationale section of the original proposal](https://forum.arbitrum.foundation/t/aip-bold-permissionless-validation-for-arbitrum/23232#rationale-3).\n\n## Implementation, Formal Specification, and Safety Proofs\n\nThe following link, [BoLD Implementation Deep Dive](https://github.com/OffchainLabs/bold/blob/main/docs/research-specs/TechnicalDeepDive.pdf), explains how BoLD is implemented and how it works at a high level. To read about the formal specifications and mathematical safety proofs for the protocol, check out the [official BoLD whitepaper](https://arxiv.org/abs/2404.10491).\n\n## Economics of Disputes, including the cost to participate, rewards, and penalties\n\nThe economics behind BoLD are carefully researched and designed to optimize for the security of the protocol while keeping costs reasonable for honest parties. More details on this topic can be found in the [Economics section of the original proposal](https://forum.arbitrum.foundation/t/aip-bold-permissionless-validation-for-arbitrum/23232#overview-of-bolds-economics-and-spam-prevention-5) and this short paper on the [Economics of Disputes in BoLD](https://github.com/OffchainLabs/bold/blob/main/docs/research-specs/Economics.pdf). \n\n## Technical Risks\n\nSome of the technical risks of the BoLD upgrade include:\n- Issues preventing liveness of challenges due to smart contract bugs in the new contracts. For instance, no honest validator able to make a move when it should be able to;\n- Safety issues where a malicious party is able to game the system and win due to logic errors in smart contracts;\n- Logic bugs in the assertion smart contracts that could affect assertion confirmation and posting, which could delay withdrawals until it is fixed; and\n- Bugs in bonding logic in the smart contracts that could lead to loss of funds due to logic errors in the Arbitrum Rollup and challenge manager smart contracts.\n\nRisks that remain the same between the current Arbitrum Rollup protocol and BoLD:\n- Bugs in the one step proof logic: BoLD does not change how one step proofs work for Arbitrum chains.\n\n## Timeline and steps to implement BoLD for Arbitrum One and Nova\n\nBelow is a list of initiatives to ensure the new BoLD dispute resolution protocol is ready to be reviewed and voted on by the ArbitrumDAO for adoption in Arbitrum One and Nova. Feedback from the community and any findings from testing will be collected and used to inform decisions and evolve BoLD along the way.\n\n1. Deployment of a public testnet with BoLD validators for a minimum of 4 weeks\n  a. Check out this guide on [how to deploy a BoLD validator on the testnet](https://github.com/offchainlabs/bold-validator-starter-kit) to begin testing out permissionless validation using Arbitrum technology!\n2. The submission of the AIP in the format of a [forum post](https://forum.arbitrum.foundation/t/aip-bold-permissionless-validation-for-arbitrum/23232).\n3. [Audit of the protocol’s implementation by Trail of Bits](https://github.com/trailofbits/publications/blob/master/reviews/2024-04-offchainbold-securityreview.pdf)\n4. Hosting of governance calls to talk about BoLD to answer questions from the community about BoLD and this AIP.\n5. This formal temperature check proposal to activate BoLD on Arbitrum’s Sepolia for a minimum of 4 weeks, be made via a Snapshot vote.\n6. Kick-start a [public audit program](https://code4rena.com/audits/2024-05-arbitrum-bold).\n7. Finalize pre-mainnet requirements, including:\n  a. Publication of BoLD migration documentation for existing validators;\n  b. Deployment of a monitoring stack to view on-going challenges on an Arbitrum chain; and\n  c. Publication of a formal procedure for The Arbitrum Foundation to handle L1 gas costs reimbursements for honest parties.\n8. Formal AIP gets submitted to Tally.\n9. Should the formal on-chain proposal pass, BoLD will activate on Arbitrum One and Nova.\n\n## Overall Cost\n\nThere is no cost for this proposal to the ArbitrumDAO as Offchain Labs, Inc. will incur all engineering and audit costs to complete the implementation of BoLD and get this new dispute resolution protocol into a mainnet-ready state. Currently, future development work for BoLD is expected to also be undertaken by Offchain Labs, Inc.\n\n## Disclaimer\n\nThe confirmation timing on any withdrawal that is in-flight when the proposed BoLD upgrade is activated will be delayed until the first BoLD assertion is confirmed. This means that for any Arbitrum chain that upgrades to use BoLD, including Arbitrum One and Arbitrum Nova, all pending withdrawals to L1 Ethereum that were initiated before the upgrade will be delayed by 1 challenge period, plus the time between the withdrawal was initiated and the time that the BoLD upgrade takes place. This is because the upgrade effectively “resets” the challenge period for that are not yet finalized.\n\n## FAQ\n\nFor additional topics & questions, please visit the BoLD specific FAQ document [here](https://www.notion.so/arbitrumfoundation/Arbitrum-BoLD-FAQ-93210f430a6a470792496be040ac9990).",
        "end_utc": "2024-06-13T18:16:34Z",
        "similarity_score": 0.1623,
        "vote_result": {
          "choices": [
            "For",
            "Against",
            "Abstain"
          ],
          "scores": [
            166971939.93604475,
            43080.45874771479,
            96170.7519266452
          ],
          "scores_total": 167111191.14671922,
          "state": "closed"
        },
        "tvl_impact": {
          "protocol_slug": "arbitrum",
          "status": "tvl_data_unavailable",
          "error": "Could not fetch TVL data: TVL cache not found for slug='arbitrum'"
        },
        "price_impact": {
          "token_id": "11841",
          "ticker": "ARB",
          "status": "success",
          "event_time_utc": "2024-06-13T18:16:34",
          "pre_price_avg": 0.9553229649999999,
          "post_price_avg": 0.9226673599999999,
          "abnormal_change": -3.4183,
          "pre_days": 3,
          "post_days": 3,
          "abnormal_change_raw": -0.034183,
          "abnormal_change_pct": -3.4183
        }
      }
    },
    {
      "proposal_id": "0x330ed0f609da63cf4b67b932ab0665a76e1c7d6a7789f3383339bad79c789d2b",
      "cleaned": {
        "proposal_id": "0x330ed0f609da63cf4b67b932ab0665a76e1c7d6a7789f3383339bad79c789d2b",
        "title": "AIP: Activate Stylus and Enable Next-Gen WebAssembly Smart Contracts (ArbOS 30)",
        "author": "0x1B686eE8E31c5959D9F5BBd8122a58682788eeaD",
        "end_utc": "2024-06-07T00:00:00Z",
        "similarity_score": 0.1615,
        "winning_option": "For",
        "winning_option_index": 0,
        "margin_abs": 146235727.55328837,
        "margin_pct": 0.9984982184042972,
        "scores_total": 146455671.98606333,
        "change_stance": "To change"
      },
      "timeline_metrics": {
        "unique_voters": 5500,
        "total_votes": 5500,
        "first_vote_at": "2024-05-31T00:01:22Z",
        "last_vote_at": "2024-06-05T09:43:51Z",
        "series_step_hours": 6.0,
        "summary": "timeline-only analysis (no final tally)",
        "recommended_index": 0,
        "lead_ratio_by_quartile": [
          [
            1.0,
            0.0,
            0.0
          ],
          [
            1.0,
            0.0,
            0.0
          ],
          [
            1.0,
            0.0,
            0.0
          ],
          [
            1.0,
            0.0,
            0.0
          ]
        ],
        "lead_ratio_total": [
          1.0,
          0.0,
          0.0
        ],
        "stability": [
          1.0,
          0.0,
          0.0
        ],
        "early_ratio": [
          1.0,
          0.0,
          0.0
        ],
        "vp_by_quartile": [
          [
            1595594.8970110614,
            50014.97735211603,
            2904.8151061818335
          ],
          [
            3503140.817662575,
            26113.9486205752,
            14364.575191494592
          ],
          [
            26328853.983012483,
            11986.077965863335,
            16615.86676597187
          ],
          [
            77828.18750023657,
            81.6319902151774,
            9.298970448715687
          ]
        ],
        "spike_index": 0.253979,
        "spike_follow_support_ratio": 0.999945,
        "stairwise_ratio": 0.003139,
        "half_slope_diff": 308.151902
      },
      "raw": {
        "id": "0x330ed0f609da63cf4b67b932ab0665a76e1c7d6a7789f3383339bad79c789d2b",
        "title": "AIP: Activate Stylus and Enable Next-Gen WebAssembly Smart Contracts (ArbOS 30)",
        "author": "0x1B686eE8E31c5959D9F5BBd8122a58682788eeaD",
        "body": "## Constitutional Proposal\n\n## Abstract\n\nThis AIP outlines a path toward activating Stylus on Arbitrum One and Arbitrum Nova. Stylus is an upgrade that introduces a new virtual machine that runs alongside the EVM. This enables developers to write smart contracts in new programming languages, like Rust, that are more efficient than Solidity smart contracts.\n\n## Motivation\n\nStylus is a first-of-its-kind technology resulting from breakthrough engineering efforts in the Arbitrum ecosystem. Unlike other alternative VMs, Stylus is purely additive to the EVM. This means that Stylus contracts and EVM contracts are fully interoperable.\n\nSome defining features of Stylus include:\n\n- Preferred Languages: There are [estimated](https://research.slashdata.co/reports/65b90140343d024fbe70f369) to be roughly 20k Solidity developers, compared to 3.5 million Rust developers and 10 million C++ developers. Developers can use their preferred programming language, all interoperable with each other, on any Arbitrum chain with Stylus. Scaling to the next billion users requires onboarding the next million developers.\n- EVM+: Stylus brings the best of both worlds. Developers still get all of the benefits of the EVM, including the ecosystem and liquidity, while getting efficiency improvements and access to existing libraries in Rust, C, and C++ — without changing anything about how the EVM works. EVM equivalence is no longer the ceiling; it’s the floor.\n- Cheaper Execution: Stylus is a more efficient execution environment than the EVM, leading directly to gas savings for complex smart contracts. Computation can be over 10x cheaper, and memory can be over 100x cheaper. Cryptography libraries can be deployed as custom application layer precompiles, permissionlessly. Use cases that are impractical in the EVM are now possible in Stylus.\n- Safer By Design: Stylus doesn’t just improve on cost and speed. WASM programs are also safer. Reentrancy is a common vulnerability that developers can only attempt to mitigate in Solidity. Stylus provides cheap reentrancy detection, and using the Rust SDK, reentrancy is disabled by default, unless intentionally overridden.\n- Fully Interoperable: Solidity programs and WASM programs are completely composable. If working in Solidity, a developer can call a Rust program or rely on another dependency in a different language. If working in Rust, all Solidity functionalities are accessible out of the box. This means your Rust smart contracts can rely on primitives and infrastructure (such as oracles) that were built using Solidity.\n\nSeveral exciting teams have been building their apps on the Stylus testnet for the past few months. These apps would simply not be possible on Arbitrum without the added efficiency or new language support. Stylus can onboard (1) the next generation of developers from alternate VM ecosystems and (2) new use cases that users cannot experience on EVM chains.\n\n## Rationale\n\nThis proposal is aligned with the Arbitrum community’s mission and values:\n- Ethereum-Aligned: Stylus does not change anything about how the EVM works. Rather than replacing, Stylus is completely additive and extends what is possible in the EVM.\n- Sustainable: More efficiency at the execution layer can give Arbitrum chains long-term competitive advantages by allowing higher throughput, cheaper costs, and new use cases that are not possible on other EVM chains.\n- Accessibility: Arbitrum can become the home for new types of developers who don’t know Solidity. This includes Rust, C, C++, and any other programming language that compiles to WebAssembly.\n- Inclusivity: The Stylus SDK is 100% open-source, meaning developers are free to fork, modify, and contribute to the core patterns that the SDK represents.\n- Empowerment: The parameters defined in Stylus are fully configurable by the Arbitrum DAO (for Arbitrum One and Arbitrum Nova) and individual Orbit chains. These customizations can supercharge Stylus by, for example, dropping activation prices, increasing contract size limits, and lowering opcode pricing.\n\n## Key Terms\n\nStylus: A new programming environment, including a WebAssembly-based virtual machine, a CLI, and a canonical SDK that defines the patterns and frameworks for writing smart contracts.\n\nWebAssembly (WASM): WebAssembly is a modern binary format used in significant web standards, browsers, and companies to speed up computation. Built to be fast, portable, and secure.\n\nVirtual Machine (VM): The software that executes smart contracts and processes transactions.\n\n## Specifications\n\nThe Stylus VM and fraud prover have been developed as a fork of the Nitro codebase. These repositories will be merged into the main branch of Nitro if the Arbitrum DAO approves the AIP:\n\nThe Stylus VM and fraud prover have been developed as a fork of the Nitro codebase. These repositories will be merged into the main branch of Nitro if the Arbitrum DAO approves the AIP:\n\n- stylus: [GitHub - OffchainLabs/stylus](https://github.com/OffchainLabs/stylus)\n  - Fork of [GitHub - OffchainLabs/nitro](https://github.com/OffchainLabs/nitro)\n  - Includes node software, VM, and Fraud Prover\n- stylus-geth: [GitHub - OffchainLabs/stylus-geth](https://github.com/OffchainLabs/stylus-geth)\n  - Fork of [GitHub - OffchainLabs/go-ethereum](https://github.com/OffchainLabs/go-ethereum)\n  - Includes the execution client and databases\n- stylus-contracts: [GitHub - OffchainLabs/stylus-contracts](https://github.com/OffchainLabs/stylus-contracts)\n  - Fork of [GitHub - OffchainLabs/nitro-contracts](https://github.com/OffchainLabs/nitro-contracts)\n  - Includes rollup and fraud proof smart contracts\n\nThe Stylus VM is not a replacement for the EVM. Instead, the two VMs work together to facilitate state transitions, each playing their part in executing their respective bytecode. EVM contracts written in Solidity still use Geth’s EVM exactly as before, ensuring EVM equivalence. In other words, Stylus is entirely additive — a paradigm called EVM+.\n\nStylus contracts can be written using the Stylus SDK, which employs Solidity-equivalent ABIs and storage patterns to ensure cross-language interoperability. For example, existing Solidity DEXs can list Rust tokens without modification. New SDKs for additional programming languages can be added over time. Current SDK repositories:\n\n- Rust SDK: [GitHub - OffchainLabs/stylus-sdk-rs: Rust Smart Contracts on Arbitrum](https://github.com/OffchainLabs/stylus-sdk-rs)\n- C/C++ SDK: [GitHub - OffchainLabs/stylus-sdk-c: C/C++ Smart Contracts on Arbitrum](https://github.com/OffchainLabs/stylus-sdk-c)\n- Stylus CLI: [GitHub - OffchainLabs/cargo-stylus: Cargo subcommand for developing Arbitrum Stylus projects in Rust](https://github.com/OffchainLabs/cargo-stylus)\n\nIf you would like to better understand the lifecycle of a Stylus contract, head over to [A Gentle Introduction: Stylus](https://docs.arbitrum.io/stylus/stylus-gentle-introduction).\n\nThere are some relevant components of Stylus that are listed below:\n\n- Host I/Os\n- The Memory Model\n- Dynamic Learning\n- Activation Pricing\n- Opcode Pricing\n\nMore details on these components can be found in the corresponding [forum post](https://forum.arbitrum.foundation/t/aip-activate-stylus-and-enable-next-gen-webassembly-smart-contracts-arbos-30/22970), which is also linked below.\n\n## Steps to Implement\n\nIf the Arbitrum DAO approves the AIP, the path would consist of:\n\n1. Discussion of the proposal on the forum\n2. Completing the audit and remaining code changes\n3. Merging the Stylus branch into the canonical Nitro codebase\n4. A vote on Snapshot to enable Stylus on Arbitrum Sepolia\n5. Sufficient time for testing on a public testnet that emulates production environments\n6. An onchain vote to deploy the upgrade on Arbitrum One and Arbitrum Nova\n\n## Timeline\n\nStylus is rapidly progressing toward being production-ready. Once it is, ideally the upgrade can take place on Arbitrum Sepolia, and Arbitrum One and Arbitrum Nova afterwards. An onchain vote for this AIP will only occur once there is a public audit report.\n\nNOTE:\nIf this vote passes on Snapshot, the tentative plan is to upgrade Arbitrum Sepolia to ArbOS 30 the week of June 10th.\n\nIf Arbitrum Sepolia upgrades to ArbOS 30, there will be an ecosystem-wide plan to ensure non-breaking compatibility of infrastructure and applications with Stylus, which will take several weeks or months. The ultimate goal is that the experience for EVM developers remains as unchanged as possible if ArbOS reaches mainnet. Once enough confidence is reached, there will be an onchain vote to upgrade Arbitrum One and Nova to ArbOS 30. The Arbitrum community will be informed of any significant updates as they arise.",
        "end_utc": "2024-06-07T00:00:00Z",
        "similarity_score": 0.1615,
        "vote_result": {
          "choices": [
            "For",
            "Against",
            "Abstain"
          ],
          "scores": [
            146325012.47333282,
            89284.92004445865,
            41374.59268584458
          ],
          "scores_total": 146455671.98606333,
          "state": "closed"
        },
        "tvl_impact": {
          "protocol_slug": "arbitrum",
          "status": "tvl_data_unavailable",
          "error": "Could not fetch TVL data: TVL cache not found for slug='arbitrum'"
        },
        "price_impact": {
          "token_id": "11841",
          "ticker": "ARB",
          "status": "success",
          "event_time_utc": "2024-06-07T00:00:00",
          "pre_price_avg": 1.1064906866666666,
          "post_price_avg": 0.9687773266666667,
          "abnormal_change": -12.446,
          "pre_days": 3,
          "post_days": 3,
          "abnormal_change_raw": -0.12446,
          "abnormal_change_pct": -12.446
        }
      }
    },
    {
      "proposal_id": "0xfd3551e2a0effc5d900e522b79300f68c351ec930cb05b62f537842508feceff",
      "cleaned": {
        "proposal_id": "0xfd3551e2a0effc5d900e522b79300f68c351ec930cb05b62f537842508feceff",
        "title": "Proposal: Security Council Elections Proposed Implementation Spec",
        "author": "0x9808E45C613eBA00bA18fB3D314dC4d4712c4A85",
        "end_utc": "2023-08-15T16:01:38Z",
        "similarity_score": 0.1579,
        "winning_option": "For",
        "winning_option_index": 0,
        "margin_abs": 80490748.12757345,
        "margin_pct": 0.9946924656344416,
        "scores_total": 80920235.05600224,
        "change_stance": "To change"
      },
      "timeline_metrics": {
        "unique_voters": 5500,
        "total_votes": 5500,
        "first_vote_at": "2023-08-08T16:04:11Z",
        "last_vote_at": "2023-08-09T03:44:28Z",
        "series_step_hours": 6.0,
        "summary": "timeline-only analysis (no final tally)",
        "recommended_index": 0,
        "lead_ratio_by_quartile": [
          [
            1.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0
          ]
        ],
        "lead_ratio_total": [
          1.0,
          0.0,
          0.0
        ],
        "stability": [
          1.0,
          0.0,
          0.0
        ],
        "early_ratio": [
          1.0,
          0.0,
          0.0
        ],
        "vp_by_quartile": [
          [
            1850327.7351062016,
            2222.3448785277574,
            5045.713114739998
          ],
          [
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0
          ]
        ],
        "spike_index": 0.503225,
        "spike_follow_support_ratio": 0.995557,
        "stairwise_ratio": 0.020043,
        "half_slope_diff": -140.093156
      },
      "raw": {
        "id": "0xfd3551e2a0effc5d900e522b79300f68c351ec930cb05b62f537842508feceff",
        "title": "Proposal: Security Council Elections Proposed Implementation Spec",
        "author": "0x9808E45C613eBA00bA18fB3D314dC4d4712c4A85",
        "body": "Category: Constitutional - Process\nAs part of its governance, the Arbitrum DAO incorporates a Security Council that can take certain emergency and non-emergency actions:\n\nSection 3 of the Constitution 10 describes this council in more detail.\nInitial Setup Transparency Report 3 details the current members of the council.\nSection 4 on the Constitution outlines an election process that will replace six security council members every six months.\nThe first election to replace the first cohort of Security Council Members is expected to begin on the 15th September.\n\nExecutive summary\nThis vote relates to the enactment of the Arbitrum Security Council elections.\nA smart contract system has been developed to enable on-chain voting. That system is final and under multiple security audits.\nThis vote is meant to temperature check with the DAO both the process that will be conducted for the elections, as well as the smart contract system that will enable them.\nA successful vote will lead to an on-chain proposal that updates the constitution text with the new sections below, as well as the new Security Council election system being activated within the broader Arbitrum governance architecture.\nImplementation Status\nThe code representing the proposed architecture is currently under audit and is available for full review in: GitHub - ArbitrumFoundation/governance at c18de53820c505fc459f766c1b224810eaeaabc5.\n\nThe work has already been audited by Trail of Bits and the identified issues have been patched in, the full audit report will be made available in the codebase soon. A Code4Rena audit competition has also been commissioned for the election system and can be viewed at Code4rena | Keeping high severity bugs out of production\n\nBackground\nAn overview of the election process as described by the Constitution alongside the process for how to enact a code change to Arbitrum’s smart contract suite:\n\nConstitution of the Arbitrum DAO 2 (esp. sections 3 10 and 4) - As noted above, this proposal seeks to enact what is already described in the Constitution.\nDAO Governance Architecture 5 - The proposed architecture makes use of a number of existing governance components.\nAn understanding of the following smart contract suites will help the reader evaluate this proposal as it re-uses several components:\n\nOpen Zeppelin Governor - The proposed architecture inherits a number of OpenZeppelin contracts.\nGnosis Modules 1 - Each of the security councils is a Gnosis Safe, and updating members of the security council is handled via adding Gnosis modules.\nHigh-level Election Overview\nThe Constitution specifies that membership of the Security Council is split into two cohorts. Every 6 months, all positions in a single cohort are put up for election.\n\nThe proposed election implementation, which must adhere to the specification laid out in the Constitution, is split into:\n\nElection stages: The process for selecting and voting for nominees.\nUpdate stages: Installing the newly elected cohort into the Arbitrum smart contracts.\nThe election process and update stages are performed via on-chain smart contracts. A brief overview of each stage includes:\n\nElection Stages\nProcess for selecting and voting for the new cohort of Security council members.\n\nNominee selection (7 days). Candidates must gain 0.2% of total votable tokens in order to make it to the next step.\nCompliance check by Foundation (14 days). As dictated in the Constitution, the selected nominees must undergo a compliance check to ensure they comply with the legal requirements, service agreements, and additional rules dictated by the Constitution.\nMember election (21 days). Votes are cast and the top 6 nominees are selected.\nUpdate Stages\nProcess to install the newly elected cohort of Security Council members into the Arbitrum smart contracts.\n\nSecurity Council manager update (0 days). The manager is the source of truth for specifying who are the current council members. It processes the election result and takes note on who will be the new security council members.\nL2 timelock + withdrawal + L1 timelock (3 + 7 + 3 days). All actions that directly affect the core Arbitrum contracts must go through a series of timelocks to protect the right for all users to exit. This is a built-in safety mechanism for users who are unhappy with the approved changes.\nIndividual council update (0 days). Once the updates have passed through the relevant timelocks, the Security Council manager can install the security council members. This requires updating 4 Gnosis Safe smart contracts that are controlled by the Security Council members.\nSecurity Council Election Flow\n \n![image](ipfs://bafkreia2bk2mmknletnshsvxbohkbszppbkb3wdntpnraj7x2gwgx2rgqq)\n    \nElection Stages in detail\n1. Nominee selection (7 days)\nThis stage consists of handling election timing, candidate registration, candidate endorsement:\n\nElection creation. Elections can be created by anyone, but only every 6 months. The election alternates between targeting the positions on the two cohorts. Once created, this first stage of the election process lasts for 7 days.\nCandidate registration. During these 7 days, any candidate can register, unless they are already a member of the other cohort. Members of the current cohort (the cohort up for election) are allowed to register for re-election.\nEndorsing candidates. Delegates can endorse a candidate during this 7 day window. A single delegate can split their vote across multiple candidates. No candidate can accrue more than 0.2% of all votable tokens.\nFallback in case of too few candidates. In the event that fewer than 6 candidates receive a 0.2% endorsement, outgoing members of the cohort up for election will be selected to make up to 6 candidates.\nImplementation details\nThe nominee selection process is implemented by the SecurityCouncilNomineeElectionGovernor contract.\n\nIt inherits most of its functionality from the Open Zeppelin Governor contracts and we have extended it with an extra feature:\n\nCustom counting module to allow delegates to endorse multiple candidates.\nThe governor contract has the following characteristics:\n\nA new proposal is created each election cycle, with an identifier unique to that election cycle.\nCandidates can the put themselves forward by calling addContender.\nDelegates can call castVoteWithReasonAndParams, supplying custom arguments in the params to indicate which candidate they wish to endorse with what weight.\n2. Compliance check by the Foundation(14 days)\nThe Foundation will be given 14 days to vet the prospective nominees. If they find that a candidate does not meet the compliance check, they can exclude the candidate from progressing to the next stage. Note that grounds for exclusion could include greater than 3 members of a given organisation being represented in the nominee set (as described in section 4 of the Constitution).\n\nImplementation details\nThe foundation can exclude a nominee by:\n\nCalling a custom excludeNominee function on the same SecurityCouncilNomineeElectionGovernor contract.\nThe Governor smart contract enforces the 2 week time period and the Foundation must exclude nominees by this deadline.\n\nOnce the compliance check has completed:\n\nAnyone can call the execute function on the SecurityCouncilNomineeElectionGovernor to proceed to the member election stage.\nIf there are less than 6 eligible nominees, then the Foundation will consult with outgoing members of the cohort on whether they will continue in this role for another 12 months. Members of the existing cohort may be selected at random to fill the remaining seats.\n\n3. Member election (21 days)\nThe voting process can begin once a set of compliant candidates have been successfully nominated.\n\nThe voting process is designed to encourage voters to cast their vote early. Their voting power will eventually decay if they do not cast their vote within the first 7 days:\n\n0 - 7 days. Votes cast will carry weight 1 per token\n7 - 21 days. Votes cast will have their weight linearly decreased based on the amount of time that has passed since the 7 day point. By the 21st day, each token will carry a weight of 0.\nAdditionally, delegates can cast votes for more than one nominee:\n\nSplit voting. delegates can split their tokens across multiple nominees, with 1 token representing 1 vote.\nImplementation details\nThe Security Council member election will take place in a separate SecurityCouncilMemberElectionGovernor contract which will also inherit from Open Zeppelin Governor contracts.\n\nAfter the 14 day waiting period for the compliance check, anyone can trigger a new member election:\n\nCall the execute function in SecurityCouncilNomineeElectionGovernor to deploy a new election proposal for SecurityCouncilMemberElectionGovernor\nThe SecurityCouncilMemberElectionGovernor includes:\n\nA custom counting module that allows delegates to split their vote and accounts for the linear decrease in voting weight.\nThese additional parameters are supplied as the params argument when calling castVoteWithReasonAndParams.\nThe custom counting module also checks that the nominee being voted is a compliant one by checking against the compliant nominee list in the SecurityCouncilNomineeElectionGovernor.\nAt the end of the 21 days of election:\n\nAnyone can call the execute function on the SecurityCouncilMemberElectionGovernor contract to initiate the update of top 6 nominees with the most votes into SecurityCouncilManager.\nUpdate stages in detail\n1. Security Council manager update\nThe security council manager is a contract which contains the canonical list of security council members, and which cohort they are part of. When a member election completes, the manager updates its local list of the current cohorts then forms cross chain messages to propagate those updates to each of the Security Council Gnosis safes.\n\nThe manager also provides some additional functionality to allow the security council to:\n\nRemove a member: As described in the Constitution, the council can remove one of its own members. The DAO can also remove a member under special conditions described by the Constitution.\nAdd a member: After removing a member, the council can add a member\nAddress rotation: As a practical matter, a council member can rotate one of their own keys. This can only be done with the approval of at least 9/12 council members as well as explicit approval from the member carrying out the rotation.\nImplementation details\nThe manager functionality is contained within a custom SecurityCouncilManager smart contract. Since the SecurityCouncilManager is indirectly able to make calls to the standard UpgradeExecutor contracts which have far reaching powers, special care must be take to ensure the manager only makes council member updates.\n\nCalling the UpgradeExecutors on each of the chains requires navigating withdrawals transactions, timelocks and inboxes, the SecurityCouncilManager outsources the calldata creation for these routes to a UpgradeExecRouteBuilder contract.\n\n2. Timelocks and withdrawal\nConstitutional DAO proposals all pass through:\n\nL2 timelock (3 days),\nL2 → L1 withdrawal (~7 days),\nL1 timelock (3 days).\nYou can read more about these stages in the governance docs 1. The purpose of these delays is to ensure that users wishing to withdraw their assets before the proposal is executed will have the time to do so. Changing the Security Council members should also provide this guarantee, so after the election has completed and before the Security Councils are updated the update message also goes through these same stages. The update message will use the existing timelocks to enforce these delays.\n\nImplementation details\nThe existing governance timelock contracts are used as part of this flow.\n\nThe SecurityCouncilManager is given the PROPOSER role on the L2 timelock enabling it to create messages that will eventually be received by each UpgradeExecutor.\n\n3. Individual council updates\nThe new Security Council members need to be installed into 4 Gnosis safes:\n\nArbitrum One 9 of 12 Emergency Security Council\nArbitrum One 7 of 12 Non-Emergency Security Council\nEthereum 9 of 12 Emergency Security Council\nNova 9 of 12 Emergency Security Council\nThe old cohort of members will be removed, and the new cohort will replace them.\n\nImplementation details\nTo do this the existing Upgrade Executor contracts on each chain will be installed as Gnosis Safe modules into the Security Council safes. A custom Governance Action Contract 2 will be used to call the specific OwnerManager addOwnerWithThreshold and removeOwner methods on the Gnosis safes.\n\nAdditional affordances\nThe Constitution also declares some other additional affordances to certain parties\n\nThe DAO can vote to remove a member prior to the end of their term, as long as 10% of possible votes are cast in favour and 5/6 of cast votes are in favour. This will be implemented as a governor with correct quorum and proposal passed thresholds. This governor will be given the rights to call removeMember on the SecurityCouncilManager.\nThe Security Council can remove a member prior to the end of their term, if 9 of 12 members agree. The 9 of 12 council will be given the rights to call removeMember on the SecurityCouncilManager.\nThe Security Council can add a member once one has been removed, if 9 of 12 members agree and if there are less than 12 members currently on the council. The 9 of 12 council will be given the rights to call addMember on the SecurityCouncilManager.\nConstitution Updates\nThe proposed implementation mostly satisfies the specification outlined by the Arbitrum Constitution. There are some minor changes that are required to the Constitution’s text to take into account the time it takes to install new candidates and to support compliance procedures set out by the Arbitrum Foundation.\n\nNote, the final wording for how to update the Constitution will be provided in a later revision. We simply want to notify the requirement that the text needs to be changed. At this stage, our request for feedback is focused on the implementation details of the smart contract suite.\n\nUpdate timeline for the election\nThe Section 4 of the Constitution contains the text:\n\nFrom T until T+7 days: Any DAO member may declare their candidacy for the Security Council; provided that a current Security Council member in one cohort may not be a candidate for a seat in the other cohort. To the extent that there are more than six candidates, each eligible candidate must be supported by pledged votes representing at least 0.2% of all Votable Tokens. In the event that fewer than six candidates are supported by pledged votes representing at least 0.2% of all Votable Tokens, the current Security Council members whose seats are up for election may become candidates (as randomly selected out of their Cohort) until there are 6 candidates.\n\nFrom T+7 days until T+28 days: Each DAO member or delegate may vote for any declared candidate. Each token may be cast for one candidate. Votes cast before T+14 days will have 100% weight. Votes cast between T+14 days and T+28 days will have weight based on the time of casting, decreasing linearly with time, with 100% weight at T+14 days, decreasing linearly to 0% weight at T+28 days.\n\nAt T+28 days: The 6 candidates who have received the most votes are elected and immediately join the Council, replacing the Cohort that was up for re-election.\n\nWe need to make three changes to the Arbitrum Constitution:\n\nNew timeline. A dedicated compliance process must be included between the nominee selection and member election phases. This will shift the timeline of events and the total election will now last at least 42 days alongside additional time to install the newly elected Security Council members via the on-chain governance smart contracts.\nLess than 6 eligible nominees. The Arbitrum Foundation has the authority to add new nominees during the Compliance stage if there are less than 6 eligible nominees.\nInstallation time. We need to remove the phrase ‘immediately join the Council’ to take into account the on-chain governance process for installing the newly elected candidates. For example, the various time locks to protect a user’s right to exit Arbitrum during the upgrade and the time it takes to send an L2 → L1 message.\nWith the above in mind, we propose an update to Section 4 of the Constitution with the following text:\n\nNominee selection (T until T+7 days): Any DAO member may declare their candidacy for the Security Council; provided that a current Security Council member in one cohort may not be a candidate for a seat in the other cohort. To the extent that there are more than six candidates, each eligible candidate must be supported by pledged votes representing at least 0.2% of all Votable Tokens.\n\nCompliance process (T+7 until T+21 days): All candidates will cooperate with The Arbitrum Foundation and complete the compliance process. The Arbitrum Foundation is responsible for removing any candidates that fail the compliance process. In the event that fewer than six candidates are supported by pledged votes representing at least 0.2% of all Votable Tokens, the current Security Council members whose seats are up for election may become candidates (as randomly selected out of their Cohort) until there are 6 candidates.\n\nMember election (T+21 until T+42 days): Each DAO member or delegate may vote for any declared candidate. Each token may be cast for one candidate. Votes cast before T+28 days will have 100% weight. Votes cast between T+28 days and T+42 days will have weight based on the time of casting, decreasing linearly with time, with 100% weight at T+28 days, decreasing linearly to 0% weight at T+42 days.\n\nAt T+42 days: The process for replacing the cohort of Security Council members with the 6 candidates who received the most votes will be activated. The installation process must be executed via the on-chain governance smart contracts and it may take several days until the new Security Council members are installed.\n\n\nWe propose to update the Constitution with the following text:\n\nThe Arbitrum Foundation is allocated 14 days for the Compliance process and it should be executed between the Nominee selection and Member election. The Arbitrum Foundation has flexibility to update its compliance policy for every new election. This is required to allow The Arbitrum Foundation to comply with Cayman Island laws. Furthermore, The Arbitrum Foundation maintains the right to issue new procedures and guidelines for off-chain components of the Security Council election. All efforts should be made by The Arbitrum Foundation to ensure an orderly, fair, and transparent election.\nFinal update to the Constitution text.\nFor completeness, the amended text for Section 4 of the Arbitrum Constitution, including the changes from AIP-4:\n\nThe Security Council has 12 members, who are divided into two Cohorts of 6 members.\n\nThe initial Security Council Cohorts were determined by randomly splitting the 12 members into two 6-member cohorts - 6 members in the ‘First Cohort’ and 6 members in the ‘Second Cohort’. The members of the initial Security Council Cohorts are detailed in a transparency report  linked in the discussion",
        "end_utc": "2023-08-15T16:01:38Z",
        "similarity_score": 0.1579,
        "vote_result": {
          "choices": [
            "For",
            "Against",
            "Abstain"
          ],
          "scores": [
            80668950.20360789,
            178202.07603444194,
            73082.77635965889
          ],
          "scores_total": 80920235.05600224,
          "state": "closed"
        },
        "tvl_impact": {
          "protocol_slug": "arbitrum",
          "status": "tvl_data_unavailable",
          "error": "Could not fetch TVL data: TVL cache not found for slug='arbitrum'"
        },
        "price_impact": {
          "token_id": "11841",
          "ticker": "ARB",
          "status": "success",
          "event_time_utc": "2023-08-15T16:01:38",
          "pre_price_avg": 1.14287731,
          "post_price_avg": 0.995952105,
          "abnormal_change": -12.8557,
          "pre_days": 3,
          "post_days": 3,
          "abnormal_change_raw": -0.128557,
          "abnormal_change_pct": -12.8557
        }
      }
    },
    {
      "proposal_id": "0x2f73825f375d59a5d3c8b05074e17140a4967e6ccb6fe20a58f836f865fcaae5",
      "cleaned": {
        "proposal_id": "0x2f73825f375d59a5d3c8b05074e17140a4967e6ccb6fe20a58f836f865fcaae5",
        "title": "AIP: Support RIP-7212 for Account Abstraction Wallets (ArbOS 30)",
        "author": "0x1B686eE8E31c5959D9F5BBd8122a58682788eeaD",
        "end_utc": "2024-06-07T00:00:00Z",
        "similarity_score": 0.1495,
        "winning_option": "For",
        "winning_option_index": 0,
        "margin_abs": 146854978.78679782,
        "margin_pct": 0.9982335364066439,
        "scores_total": 147114851.81657377,
        "change_stance": "To change"
      },
      "timeline_metrics": {
        "unique_voters": 5500,
        "total_votes": 5500,
        "first_vote_at": "2024-05-31T00:01:37Z",
        "last_vote_at": "2024-06-04T22:28:44Z",
        "series_step_hours": 6.0,
        "summary": "timeline-only analysis (no final tally)",
        "recommended_index": 0,
        "lead_ratio_by_quartile": [
          [
            1.0,
            0.0,
            0.0
          ],
          [
            1.0,
            0.0,
            0.0
          ],
          [
            1.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0
          ]
        ],
        "lead_ratio_total": [
          1.0,
          0.0,
          0.0
        ],
        "stability": [
          1.0,
          0.0,
          0.0
        ],
        "early_ratio": [
          1.0,
          0.0,
          0.0
        ],
        "vp_by_quartile": [
          [
            1631612.397367377,
            20419.635700729883,
            2208.178283340845
          ],
          [
            3491704.6885344163,
            16768.264637329674,
            20467.05286271051
          ],
          [
            23520781.02257065,
            13205.906724404223,
            69491.44158628648
          ],
          [
            0.0,
            0.0,
            0.0
          ]
        ],
        "spike_index": 0.279349,
        "spike_follow_support_ratio": 1.0,
        "stairwise_ratio": 0.003374,
        "half_slope_diff": 1581.222371
      },
      "raw": {
        "id": "0x2f73825f375d59a5d3c8b05074e17140a4967e6ccb6fe20a58f836f865fcaae5",
        "title": "AIP: Support RIP-7212 for Account Abstraction Wallets (ArbOS 30)",
        "author": "0x1B686eE8E31c5959D9F5BBd8122a58682788eeaD",
        "body": "## Constitutional Proposal\n\n## Abstract\nThis proposal adopts [RIP-7212](https://github.com/ethereum/RIPs/blob/master/RIPS/rip-7212.md) (Rollup Improvement Proposal), a precompile for verifying the [secp256r1 curve](https://www.nervos.org/knowledge-base/what_is_secp256r1) on Arbitrum One and Arbitrum Nova. Other major L2s have committed to adopting RIP-7212. Adding support for this precompile would enable account abstraction wallets to cheaply verify a type of signature widely used in passkeys and secure enclaves.\n\n## Motivation\n\nWallet security is one of the most prominent pain points for crypto users today. Adopting RIP-7212 will reduce the costs of using passkey-based wallets on Arbitrum One and Nova, making them more feasible for everyday use and enabling dApp developers and protocols to offer their users improved UX.\n\nPasskey-based wallets offer a better level of security than a typical EOA and seamless cross-device support. Specifically, adding this precompile will reduce the costs of verifying the secp256r1 curve for account abstraction wallets. Passkeys offer a solution that removes the need for personally storing a private key. They leverage WebAuthn, a global standard for passwordless authentication used by Google, Facebook, Microsoft, and all major web browsers. The private key generated when creating a passkey can be encrypted and then stored in the iCloud Keychain (or the Android Keystore for Android devices). The decryption of the private keys happens in a specialized module located in every iPhone (and other smartphones) called the Secure Enclave. The Secure Enclave ensures a user’s private key can never leave the device, transforming a smartphone into a hardware wallet. Users can authorize transactions with biometric features like Touch ID or Face ID when using passkey-based wallets for key management. These qualities add flexibility and significantly improve UX while maintaining high security.\n\nEthereum currently has a precompile for the [secp25k1](https://www.nervos.org/knowledge-base/secp256k1_a_key%20algorithm_(explainCKBot)) curve, which all EOA wallets use as their signature scheme. Account abstraction wallets can use alternative signature schemes, such as the one that passkeys utilize: secp256r1. Without a precompile, verifying this signature onchain is extremely expensive. Adding support for RIP-7212 would decrease the costs of verifying the secp256r1 curve [by 99%](https://www.alchemy.com/blog/what-is-rip-7212) when compared to current implementations. This makes implementing passkey-based wallets feasible for everyday use. Many wallets, and notably, apps using embedded wallets, have been requesting this feature for over a year.\n\n## Rationale\n\nThis proposal is aligned with the Arbitrum community’s mission and values as per the [Constitution](https://docs.arbitrum.foundation/dao-constitution#section-6-community-values):\n\n- Ethereum-Aligned: RIP-7212 is the first Rollup Improvement Proposal adopted by the broader Ethereum ecosystem. The RIP stakeholders coordinate with Ethereum Core Devs to ensure Ethereum will continue to be compatible with the upgrade.\n\n- Accessibility: Many users who are not crypto-native will refuse to write down a seed phrase or buy a dedicated hardware wallet. While options exist to get around those pain points, this upgrade empowers account abstraction wallets to provide high-level security without UX tradeoffs.\n\n- Secure: Passkeys and secure enclaves offer hardware-level security since a user’s private key can never leave the device. This is a great alternative to EOAs that does not compromise on usability.\n\n- Inclusivity: RIP-7212 was discussed publicly among all major L2s before being adopted. The codebase is open-source, and anyone can implement the upgrade.\n\n## Key Terms\n- RIP (Rollup Improvement Proposal): A process to establish optional norms and standards for L2s to extend the EVM and related tooling while limiting conflicts with the L1 EVM and preventing a proliferation of mutually incompatible standards among L2s.\n- Precompile: Predefined smart contracts with special addresses that provide specific functionality executed not at the EVM bytecode level but natively by the client.\n\n## Specification\nThe specifications of RIP-7212, including test cases, can be found in the [RIP repository](https://github.com/ethereum/RIPs/blob/master/RIPS/rip-7212.md). If approved, Arbitrum One will use this specification as the reference for implementation.\n\nThe [Ethereum Magicians Forum](https://ethereum-magicians.org/t/eip-7212-precompiled-for-secp256r1-curve-support/14789) discusses design decisions, iterations, and the transformation of the proposal from an EIP (Ethereum Improvement Proposal) to a RIP.\n\n## Steps to Implement\n\nIf the Arbitrum DAO approves the AIP, the path would consist of:\n\n1. Discussion of the proposal on the forum and governance call(s)\n2. A vote on Snapshot to enable RIP-7212 on Arbitrum Sepolia\n3. Sufficient time for testing on a public testnet that emulates production environments\n4. An onchain vote to deploy the upgrade on Arbitrum One and Arbitrum Nova\n\n## Timeline\nThis proposal will be included in the vote to upgrade to the next version of ArbOS along with [Stylus](https://forum.arbitrum.foundation/t/aip-activate-stylus-and-enable-next-gen-webassembly-smart-contracts/22970), which will move to a Snapshot vote once it is production-ready.\n\nNOTE:\nIf this vote passes on Snapshot, the tentative plan is to upgrade Arbitrum Sepolia to ArbOS 30 the week of June 10th.\n\nIf Arbitrum Sepolia upgrades to ArbOS 30, there will be an ecosystem-wide plan to ensure non-breaking compatibility of infrastructure and applications with Stylus, which will take several weeks or months. The ultimate goal is that the experience for EVM developers remains as unchanged as possible if ArbOS reaches mainnet. Once enough confidence is reached, there will be an onchain vote to upgrade Arbitrum One and Nova to ArbOS 30. The Arbitrum community will be informed of any significant updates as they arise.",
        "end_utc": "2024-06-07T00:00:00Z",
        "similarity_score": 0.1495,
        "vote_result": {
          "choices": [
            "For",
            "Against",
            "Abstain"
          ],
          "scores": [
            146958741.26344103,
            52348.07648960941,
            103762.47664319372
          ],
          "scores_total": 147114851.81657377,
          "state": "closed"
        },
        "tvl_impact": {
          "protocol_slug": "arbitrum",
          "status": "tvl_data_unavailable",
          "error": "Could not fetch TVL data: TVL cache not found for slug='arbitrum'"
        },
        "price_impact": {
          "token_id": "11841",
          "ticker": "ARB",
          "status": "success",
          "event_time_utc": "2024-06-07T00:00:00",
          "pre_price_avg": 1.1064906866666666,
          "post_price_avg": 0.9687773266666667,
          "abnormal_change": -12.446,
          "pre_days": 3,
          "post_days": 3,
          "abnormal_change_raw": -0.12446,
          "abnormal_change_pct": -12.446
        }
      }
    }
  ],
  "semantic_references": [],
  "decision": {
    "snapshot_url": "https://snapshot.org/#/arbitrumfoundation.eth/proposal/0x7cc26491a070c74c1a4ec5a9892571d31eb690015936a35b52c0d3a97bd5497f",
    "selected_choice_label": "For",
    "selected_choice_index": 0,
    "confidence": 0.95,
    "summary": "The proposal to upgrade Arbitrum One and Arbitrum Nova to ArbOS 40 Callisto received overwhelming support in the voting timeline and forum discussions. It aligns Arbitrum with Ethereum's upcoming Pectra upgrade, introduces important technical enhancements (e.g., EIP-7702 for EOAs, EIP-2537 cryptographic improvements, and EIP-2935 block hash accessibility), and fixes minor bugs. Despite some concerns about timing and governance process, the consensus is strongly in favor of adoption.",
    "key_arguments_for": [
      "Ensures Arbitrum stays aligned with Ethereum's Pectra upgrade, preserving compatibility and ecosystem cohesion.",
      "Introduces advanced features for Externally Owned Accounts (EOAs) like account abstraction, batching, and transaction sponsorship.",
      "Improves security through enhanced cryptographic precompiles (BLS12-381 curve operations).",
      "Extends access to historical block data improving client efficiency.",
      "Received positive technical reviews and a successful security audit.",
      "Strong community and delegate support with robust vote and forum sentiment."
    ],
    "key_arguments_against": [
      "Concerns about governance process timing and whether the proposal is fully fleshed out for delegate voting.",
      "Potential risks if upgrade activation is delayed relative to Ethereum’s upgrade, possibly causing temporary incompatibility.",
      "Questions about readiness of developer tooling and ecosystem for a smooth transition.",
      "Some delegates prefer to wait for on-chain vote after audit details are fully reviewed."
    ],
    "evidence": [
      {
        "source_tool": "forums_fetch_discussion",
        "reference": "https://forum.arbitrum.foundation/t/constitutional-aip-arbos-version-40-callisto/28436",
        "quote": "The forum discussion shows strong support with 28 positive, 15 negative, and 29 neutral sentiments. Key positive posts highlight the necessity of upgrade for Ethereum alignment, improved UX, and developer features. Negative comments mainly focus on governance process and timing concerns."
      },
      {
        "source_tool": "timeline_analyze_timeline",
        "reference": "Snapshot proposal timeline metrics",
        "quote": "Voting timeline shows a stable and unanimous lead for 'For' choice (index 0) with 100% lead ratio across all quartiles and high stability metrics."
      },
      {
        "source_tool": "govnews_search_governance_news",
        "reference": "Adjacent similar proposals analysis",
        "quote": "Similar recent proposals related to budgeting and fee management passed with strong 'For' votes and mostly positive or neutral market responses, reinforcing community preference for proactive improvements."
      }
    ],
    "available_choices": [
      "For",
      "Against",
      "Abstain"
    ],
    "event_start_utc": "2025-02-20T23:00:00Z",
    "event_end_utc": "2025-02-27T23:00:00Z",
    "event_time_utc": "2025-02-27T23:00:00Z",
    "address_of_governance_token": "0x912CE59144191C1204E64559FE8253a0e49E6548",
    "token_price_impact_pct": 3.515,
    "tvl_impact_pct": -6.4359,
    "actual_vote_result": {
      "winner_label": "For",
      "winner_index": 0,
      "scores": [
        123959243.23349434,
        7831.854923975474,
        20030177.15908057
      ],
      "scores_total": 143997252.24749905,
      "margin_abs": 103929066.07441378,
      "margin_pct": 0.721743
    },
    "simulation_reason": null,
    "references": null,
    "decision_stance": "Change",
    "ai_final_conclusion": "Option 'For' selected with stance to keep 'Change'.",
    "ai_final_reason": "- The voting timeline and analytics indicate unanimous and stable support for the 'For' option, signaling clear community endorsement.\n- Forum sentiment is predominantly positive, emphasizing the upgrade's necessity for Ethereum compatibility, improved user and developer experience, and technical robustness.\n- Historical adjacent proposals with similar upgrade intents passed successfully, providing positive lessons for proceeding.\n- Market impact shows a positive price response, reinforcing confidence in the upgrade's value.\n- Negative sentiments mostly concern governance timing and audit transparency, which are addressed with ongoing audits and procedural steps.\n- The recommendation aligns with aggregated forum and vote sentiment, reflecting community views and prioritizing Arbitrum's long-term health and ecosystem alignment.",
    "similar_proposals": [
      {
        "proposal_id": "0xbd77b4faf99e06c7b4117e5dafaf5bb8f873bcffbb5c9d414a7ff745b6849f3a",
        "title": "Approve the Nova Fee Sweep Action",
        "end_utc": "2025-02-07T04:30:00Z",
        "summary": "Approve the Nova Fee Sweep Action closed on 2025-02-07T04:30:00Z. Timeline analytics noted 3550 unique voters, timeline-only analysis (no final tally), recommended option index 0.",
        "similarity_reason": "Related text overlap (score 0.14)",
        "market_response": "token -2.96%; TVL +0.95%",
        "change_stance": "To change"
      },
      {
        "proposal_id": "0x6baef084d47cb0e0f5788449e0d6fafd6312a69f65b550d62d5b6772297b8695",
        "title": "Arbitrum Strategic Objective Setting (SOS) – Defining the DAO’s Interim Goals",
        "end_utc": "2025-01-31T00:06:29Z",
        "summary": "Arbitrum Strategic Objective Setting (SOS) – Defining the DAO’s Interim Goals closed on 2025-01-31T00:06:29Z. Timeline analytics noted 3559 unique voters, timeline-only analysis (no final tally), recommended option index 0.",
        "similarity_reason": "Related text overlap (score 0.12)",
        "market_response": "token -8.81%; TVL -3.60%",
        "change_stance": "To change"
      }
    ],
    "ex_post_price_impact_pct": 3.515,
    "ex_post_tvl_impact_pct": -6.4359,
    "ex_post_window": "3d pre / 3d post around event end",
    "ex_post_note": "Token price +3.52%; TVL -6.44%"
  },
  "agentic_ai_choice": "For",
  "actual_outcome": "For",
  "match_result": "same",
  "forum_sentiment_summary": {
    "Negative": 15,
    "Positive": 28,
    "Neutral": 29,
    "total_comments": 72
  }
}